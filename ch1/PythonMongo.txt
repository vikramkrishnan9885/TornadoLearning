vikram@vikram-Inspiron-7370:~/Dropbox/New-Inspiron-Ubuntu/Other/tornado-learning/ch1$ python
Python 3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56) 
[GCC 7.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import motor
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ModuleNotFoundError: No module named 'motor'
>>> exit()
vikram@vikram-Inspiron-7370:~/Dropbox/New-Inspiron-Ubuntu/Other/tornado-learning/ch1$ sudo pip3 install tornado motor
[sudo] password for vikram: 
The directory '/home/vikram/.cache/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
The directory '/home/vikram/.cache/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
Requirement already satisfied: tornado in /usr/local/lib/python3.6/dist-packages
Collecting motor
  Downloading https://files.pythonhosted.org/packages/28/ca/a2e740ad2822cbf0d2ac4a3b2b48e043142014ab5c8c2129fa5c71c8cdb5/motor-2.0.0-py2.py3-none-any.whl (45kB)
    100% |████████████████████████████████| 51kB 100kB/s 
Collecting pymongo<4,>=3.6 (from motor)
  Downloading https://files.pythonhosted.org/packages/b1/45/5440555b901a8416196fbf2499c4678ef74de8080c007104107a8cfdda20/pymongo-3.7.2-cp36-cp36m-manylinux1_x86_64.whl (408kB)
    100% |████████████████████████████████| 409kB 50kB/s 
Installing collected packages: pymongo, motor
Successfully installed motor-2.0.0 pymongo-3.7.2
vikram@vikram-Inspiron-7370:~/Dropbox/New-Inspiron-Ubuntu/Other/tornado-learning/ch1$ pip3 install tornado motor
Requirement already satisfied: tornado in /home/vikram/anaconda3/lib/python3.6/site-packages (5.0.2)
Collecting motor
  Downloading https://files.pythonhosted.org/packages/28/ca/a2e740ad2822cbf0d2ac4a3b2b48e043142014ab5c8c2129fa5c71c8cdb5/motor-2.0.0-py2.py3-none-any.whl (45kB)
    100% |████████████████████████████████| 51kB 64kB/s 
Collecting pymongo<4,>=3.6 (from motor)
  Downloading https://files.pythonhosted.org/packages/b1/45/5440555b901a8416196fbf2499c4678ef74de8080c007104107a8cfdda20/pymongo-3.7.2-cp36-cp36m-manylinux1_x86_64.whl (408kB)
    100% |████████████████████████████████| 409kB 84kB/s 
Installing collected packages: pymongo, motor
Successfully installed motor-2.0.0 pymongo-3.7.2
vikram@vikram-Inspiron-7370:~/Dropbox/New-Inspiron-Ubuntu/Other/tornado-learning/ch1$ python
Python 3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56) 
[GCC 7.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import motor
>>> import motor.motor_tornado
>>> lient = motor.motor_tornado.MotorClient()
>>> client = motor.motor_tornado.MotorClient()
>>> db = client.test_database
>>> collection = db.test_collection
>>> async def do_insert():
...     document = {"my_key":"my_val"}
...     result = await collection.insert_one(document)
...     print("result %s", %repr(result.inserted_id))
  File "<stdin>", line 4
    print("result %s", %repr(result.inserted_id))
                       ^
SyntaxError: invalid syntax
>>> async def do_insert():
...     document = {"my_key":"my_val"}
...     result = await collection.insert_one(document)
...     print("result %s" %repr(result.inserted_id))
... 
>>> IOLoop.current().run_sync(do_insert)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'IOLoop' is not defined
>>> import tornado.ioloop.IOLoop
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ModuleNotFoundError: No module named 'tornado.ioloop.IOLoop'; 'tornado.ioloop' is not a package
>>> import tornado.ioloop
>>> from tornado.ioloop import IOLoop
>>> IOLoop.current().run_sync(do_insert)
result ObjectId('5cb9f4831a28f0507edc6b69')
>>> async def do_find_one():
...     document = await.db.test_collection.find_one({'i': {'$lt': 1}})
  File "<stdin>", line 2
    document = await.db.test_collection.find_one({'i': {'$lt': 1}})
                    ^
SyntaxError: invalid syntax
>>> async def do_find_one():
...     document = await db.test_collection.find_one({'i': {'$lt': 1}})
...     pprint.pprint(document)
... 
>>> IOLoop.current().run_sync(do_find_one)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vikram/anaconda3/lib/python3.6/site-packages/tornado/ioloop.py", line 581, in run_sync
    return future_cell[0].result()
  File "<stdin>", line 3, in do_find_one
NameError: name 'pprint' is not defined
>>> import pprint
>>> async def do_find_one():
...     document = await db.test_collection.find_one()
...     pprint.pprint(document)
... 
>>> IOLoop.current().run_sync(do_find_one)
{'_id': ObjectId('5cb9f4831a28f0507edc6b69'), 'my_key': 'my_val'}
>>> 

=================================================================

vikram@vikram-Inspiron-7370:~/Dropbox/New-Inspiron-Ubuntu/Other/tornado-learning/ch1$ mongo
MongoDB shell version v4.0.9
connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("346b93da-af20-4ccb-a10f-dda45adaa6ff") }
MongoDB server version: 4.0.9
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
	http://docs.mongodb.org/
Questions? Try the support group
	http://groups.google.com/group/mongodb-user
Server has startup warnings: 
2019-04-19T21:30:34.395+0530 I STORAGE  [initandlisten] 
2019-04-19T21:30:34.395+0530 I STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine
2019-04-19T21:30:34.395+0530 I STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem
2019-04-19T21:30:35.244+0530 I CONTROL  [initandlisten] 
2019-04-19T21:30:35.244+0530 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2019-04-19T21:30:35.244+0530 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2019-04-19T21:30:35.244+0530 I CONTROL  [initandlisten] 
---
Enable MongoDB's free cloud-based monitoring service, which will then receive and display
metrics about your deployment (disk utilization, CPU, operation statistics, etc).

The monitoring data will be available on a MongoDB website with a unique URL accessible to you
and anyone you share the URL with. MongoDB may use this information to make product
improvements and to suggest MongoDB products and deployment options to you.

To enable free monitoring, run the following command: db.enableFreeMonitoring()
To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---

> db.collection.find()
> db.test_collection.find()
> db.test_collection.find_one()
2019-04-19T21:56:33.819+0530 E QUERY    [js] TypeError: db.test_collection.find_one is not a function :
@(shell):1:1
> cursor = db..test_collection.find()
2019-04-19T21:57:09.875+0530 E QUERY    [js] SyntaxError: missing name after . operator @(shell):1:12
> cursor = db.test_collection.find()
> cursor
> cursor = db.test_collection.findOne()
null
> db.test_collection.findOne()
null
> db.test_collection
test.test_collection
> test_db.test_collection.findOne()
2019-04-19T22:00:17.957+0530 E QUERY    [js] ReferenceError: test_db is not defined :
@(shell):1:1
> db.adminCommand( { listDatabases: 1 } )
{
	"databases" : [
		{
			"name" : "admin",
			"sizeOnDisk" : 32768,
			"empty" : false
		},
		{
			"name" : "config",
			"sizeOnDisk" : 90112,
			"empty" : false
		},
		{
			"name" : "local",
			"sizeOnDisk" : 32768,
			"empty" : false
		},
		{
			"name" : "test_database",
			"sizeOnDisk" : 32768,
			"empty" : false
		}
	],
	"totalSize" : 188416,
	"ok" : 1
}
> test_database.test_collection.findOne()
2019-04-19T22:01:51.508+0530 E QUERY    [js] ReferenceError: test_database is not defined :
@(shell):1:1
> db.getCollectionNames() 
[ ]
> use test_database;
switched to db test_database
> show collections;
test_collection
> db.test_collection.find()
{ "_id" : ObjectId("5cb9f4831a28f0507edc6b69"), "my_key" : "my_val" }
> 

